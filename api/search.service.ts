/**
 * EVE Swagger Interface
 * An OpenAPI for EVE Online
 *
 * OpenAPI spec version: 0.8.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { BadRequest } from '../model/badRequest';
import { ErrorLimited } from '../model/errorLimited';
import { Forbidden } from '../model/forbidden';
import { GatewayTimeout } from '../model/gatewayTimeout';
import { GetCharactersCharacterIdSearchOk } from '../model/getCharactersCharacterIdSearchOk';
import { GetSearchOk } from '../model/getSearchOk';
import { InternalServerError } from '../model/internalServerError';
import { ServiceUnavailable } from '../model/serviceUnavailable';
import { Unauthorized } from '../model/unauthorized';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SearchService {

    protected basePath = 'https://esi.evetech.net/latest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Search on a string
     * Search for entities that match a given sub-string.  --- Alternate route: &#x60;/dev/characters/{character_id}/search/&#x60;  Alternate route: &#x60;/v3/characters/{character_id}/search/&#x60;  --- This route is cached for up to 3600 seconds
     * @param categories Type of entities to search for
     * @param character_id An EVE character ID
     * @param search The string to search on
     * @param Accept_Language Language to use in the response
     * @param datasource The server name you would like data from
     * @param If_None_Match ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param language Language to use in the response, takes precedence over Accept-Language
     * @param strict Whether the search should be a strict match
     * @param token Access token to use if unable to set a header
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCharactersCharacterIdSearch(categories: Array<'agent' | 'alliance' | 'character' | 'constellation' | 'corporation' | 'faction' | 'inventory_type' | 'region' | 'solar_system' | 'station' | 'structure'>, character_id: number, search: string, Accept_Language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', datasource?: 'tranquility' | 'singularity', If_None_Match?: string, language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', strict?: boolean, token?: string, observe?: 'body', reportProgress?: boolean): Observable<GetCharactersCharacterIdSearchOk>;
    public getCharactersCharacterIdSearch(categories: Array<'agent' | 'alliance' | 'character' | 'constellation' | 'corporation' | 'faction' | 'inventory_type' | 'region' | 'solar_system' | 'station' | 'structure'>, character_id: number, search: string, Accept_Language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', datasource?: 'tranquility' | 'singularity', If_None_Match?: string, language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', strict?: boolean, token?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetCharactersCharacterIdSearchOk>>;
    public getCharactersCharacterIdSearch(categories: Array<'agent' | 'alliance' | 'character' | 'constellation' | 'corporation' | 'faction' | 'inventory_type' | 'region' | 'solar_system' | 'station' | 'structure'>, character_id: number, search: string, Accept_Language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', datasource?: 'tranquility' | 'singularity', If_None_Match?: string, language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', strict?: boolean, token?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetCharactersCharacterIdSearchOk>>;
    public getCharactersCharacterIdSearch(categories: Array<'agent' | 'alliance' | 'character' | 'constellation' | 'corporation' | 'faction' | 'inventory_type' | 'region' | 'solar_system' | 'station' | 'structure'>, character_id: number, search: string, Accept_Language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', datasource?: 'tranquility' | 'singularity', If_None_Match?: string, language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', strict?: boolean, token?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (categories === null || categories === undefined) {
            throw new Error('Required parameter categories was null or undefined when calling getCharactersCharacterIdSearch.');
        }

        if (character_id === null || character_id === undefined) {
            throw new Error('Required parameter character_id was null or undefined when calling getCharactersCharacterIdSearch.');
        }

        if (search === null || search === undefined) {
            throw new Error('Required parameter search was null or undefined when calling getCharactersCharacterIdSearch.');
        }







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (categories) {
            queryParameters = queryParameters.set('categories', categories.join(COLLECTION_FORMATS['csv']));
        }
        if (datasource !== undefined && datasource !== null) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (language !== undefined && language !== null) {
            queryParameters = queryParameters.set('language', <any>language);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (strict !== undefined && strict !== null) {
            queryParameters = queryParameters.set('strict', <any>strict);
        }
        if (token !== undefined && token !== null) {
            queryParameters = queryParameters.set('token', <any>token);
        }

        let headers = this.defaultHeaders;
        if (Accept_Language !== undefined && Accept_Language !== null) {
            headers = headers.set('Accept-Language', String(Accept_Language));
        }
        if (If_None_Match !== undefined && If_None_Match !== null) {
            headers = headers.set('If-None-Match', String(If_None_Match));
        }

        // authentication (evesso) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<GetCharactersCharacterIdSearchOk>(`${this.basePath}/characters/${encodeURIComponent(String(character_id))}/search/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search on a string
     * Search for entities that match a given sub-string.  --- Alternate route: &#x60;/dev/search/&#x60;  Alternate route: &#x60;/v2/search/&#x60;  --- This route is cached for up to 3600 seconds
     * @param categories Type of entities to search for
     * @param search The string to search on
     * @param Accept_Language Language to use in the response
     * @param datasource The server name you would like data from
     * @param If_None_Match ETag from a previous request. A 304 will be returned if this matches the current ETag
     * @param language Language to use in the response, takes precedence over Accept-Language
     * @param strict Whether the search should be a strict match
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSearch(categories: Array<'agent' | 'alliance' | 'character' | 'constellation' | 'corporation' | 'faction' | 'inventory_type' | 'region' | 'solar_system' | 'station'>, search: string, Accept_Language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', datasource?: 'tranquility' | 'singularity', If_None_Match?: string, language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', strict?: boolean, observe?: 'body', reportProgress?: boolean): Observable<GetSearchOk>;
    public getSearch(categories: Array<'agent' | 'alliance' | 'character' | 'constellation' | 'corporation' | 'faction' | 'inventory_type' | 'region' | 'solar_system' | 'station'>, search: string, Accept_Language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', datasource?: 'tranquility' | 'singularity', If_None_Match?: string, language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', strict?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetSearchOk>>;
    public getSearch(categories: Array<'agent' | 'alliance' | 'character' | 'constellation' | 'corporation' | 'faction' | 'inventory_type' | 'region' | 'solar_system' | 'station'>, search: string, Accept_Language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', datasource?: 'tranquility' | 'singularity', If_None_Match?: string, language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', strict?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetSearchOk>>;
    public getSearch(categories: Array<'agent' | 'alliance' | 'character' | 'constellation' | 'corporation' | 'faction' | 'inventory_type' | 'region' | 'solar_system' | 'station'>, search: string, Accept_Language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', datasource?: 'tranquility' | 'singularity', If_None_Match?: string, language?: 'de' | 'en-us' | 'fr' | 'ja' | 'ru' | 'zh', strict?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (categories === null || categories === undefined) {
            throw new Error('Required parameter categories was null or undefined when calling getSearch.');
        }

        if (search === null || search === undefined) {
            throw new Error('Required parameter search was null or undefined when calling getSearch.');
        }






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (categories) {
            queryParameters = queryParameters.set('categories', categories.join(COLLECTION_FORMATS['csv']));
        }
        if (datasource !== undefined && datasource !== null) {
            queryParameters = queryParameters.set('datasource', <any>datasource);
        }
        if (language !== undefined && language !== null) {
            queryParameters = queryParameters.set('language', <any>language);
        }
        if (search !== undefined && search !== null) {
            queryParameters = queryParameters.set('search', <any>search);
        }
        if (strict !== undefined && strict !== null) {
            queryParameters = queryParameters.set('strict', <any>strict);
        }

        let headers = this.defaultHeaders;
        if (Accept_Language !== undefined && Accept_Language !== null) {
            headers = headers.set('Accept-Language', String(Accept_Language));
        }
        if (If_None_Match !== undefined && If_None_Match !== null) {
            headers = headers.set('If-None-Match', String(If_None_Match));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<GetSearchOk>(`${this.basePath}/search/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
